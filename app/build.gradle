import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
apply plugin: 'me.tatarka.retrolambda'

android {
    signingConfigs {
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId "com.raymond.randomexercise"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    supportLibVersion = "23.2.1"
    rxjavaVersion = "1.1.0"
    retrofitVersion = "2.0.1"
    okHtttpVersion = "3.2.0"
    glideVersion = "3.7.0"
    aspectjVersion = "1.8.6"
    frescoVersion = "0.10.0"
    constraintLayout = "1.0.0-alpha1"
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.plattysoft.leonids:LeonidsLib:1.3.1'
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    //    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //RxJava
    compile "io.reactivex:rxandroid:${rxjavaVersion}"
    compile "io.reactivex:rxjava:${rxjavaVersion}"
    //Retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    //OkHttp
    compile "com.squareup.okhttp3:okhttp:${okHtttpVersion}"
    compile "com.github.bumptech.glide:glide:${glideVersion}"
    compile "com.facebook.fresco:fresco:${frescoVersion}"
    // AspectJ
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    // constraint layout
    compile 'com.android.support.constraint:constraint-layout:' + constraintLayout
    compile project(path: ':robo')
}
buildscript {
    ext.kotlin_version = '1.0.2'
    ext.retrolambda_version = '3.2.5'
    repositories {
        mavenCentral()
    }
    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "me.tatarka:gradle-retrolambda:$retrolambda_version"
        classpath 'org.aspectj:aspectjtools:1.8.6'
    }
}
repositories {
    mavenCentral()
}

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
